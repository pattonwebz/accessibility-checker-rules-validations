name: Cypress tests

on:
  workflow_dispatch:
    inputs:
      repo_tag:
        description: 'Accessibility Checker Tag'
      repo_hash:
        description: 'Accessibility Checker Hash'

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.6
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wordpress
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      wordpress:
        image: wordpress:latest
        env:
          WORDPRESS_DB_HOST: mysql
          WORDPRESS_DB_USER: wordpress
          WORDPRESS_DB_PASSWORD: password
          WORDPRESS_DB_NAME: wordpress
        ports:
          - 80:80
        options: --name wordpress --health-cmd="curl -f http://127.0.0.1" --health-interval=5s --health-timeout=5s --health-retries=15
        volumes:
          - /tmp/wordpress:/var/www/html
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: wp-cli

      - name: Install WP-CLI in WordPress container
        run: docker exec wordpress bash -c "curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && chmod +x wp-cli.phar && mv wp-cli.phar /usr/local/bin/wp"

      - name: Set up custom hostname
        run: echo "127.0.0.1 rulecheck.local" | sudo tee -a /etc/hosts

      - name: Install WordPress
        run: |
          wp core install --allow-root --ssh=docker:wordpress --url=rulecheck.local --title=Test --admin_user=rulecheck --admin_password=5arWYMJtJnxTN5xpWjKBNS --admin_email=rulecheck@example.com

      - name: Import posts
        run: |
          sudo cp -R ./data /tmp/wordpress
          sudo chown www-data:www-data /tmp/wordpress/data -R
          wp plugin install wordpress-importer --activate --allow-root --ssh=docker:wordpress
          wp import data/wordpress-export.xml --allow-root --ssh=docker:wordpress --authors=create

      - name: Check repo_hash or tag in other repository
        id: check_repo_hash
        if: github.event.inputs.repo_hash != ''
        run: |
          REPO_HASH="${{ github.event.inputs.repo_hash }}"
          if [ -n "$REPO_HASH" ]; then
            RESPONSE=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/equalizedigital/accessibility-checker/commits/$REPO_HASH")

            if [[ "$RESPONSE" == *"message"* && "$RESPONSE" == *"Not Found"* ]]; then
              echo "No commit found with hash $REPO_HASH in the other repository"
              FOUND=false
            else
              FOUND=true
              echo "Commit found with hash $REPO_HASH in the other repository"
            fi
          else
            echo "No repo_hash provided"
            FOUND=false
          fi
          
          if [ "$FOUND" == true ]; then
            git clone --no-checkout https://github.com/equalizedigital/accessibility-checker.git /tmp/accessibility-checker
            cd /tmp/accessibility-checker
            git fetch origin $REPO_HASH
            git checkout $REPO_HASH
            cd -
          fi
          echo "::set-output name=hash_found::$FOUND"

      - name: Check repo_tag in other repository
        id: check_repo_tag
        if: github.event.inputs.repo_tag != '' && steps.check_repo_hash.outputs.hash_found == true
        run: |
          REPO_TAG="${{ github.event.inputs.repo_tag }}"
          if [ -n "$REPO_TAG" ]; then
            RESPONSE=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/equalizedigital/accessibility-checker/tags")

            if echo "$RESPONSE" | grep -q "\"name\": \"$REPO_TAG\""; then
              echo "Tag $REPO_TAG found in the other repository"
              echo "::set-output name=tag_found::true"
                FOUND=true
            else
              echo "No tag found with name $REPO_TAG in the other repository"
              FOUND=false
            fi
          fi
          
          if [ "$FOUND" == true ]; then
            git clone --no-checkout https://github.com/equalizedigital/accessibility-checker.git /tmp/accessibility-checker
            cd /tmp/accessibility-checker
            git fetch origin tag $REPO_TAG
            git checkout $REPO_TAG
            cd -
          fi
          
          echo "::set-output name=tag_found::$FOUND"

      - name: Install and activate plugin
        run: |
          if [[ -z "${{ steps.check_repo_hash.outputs.hash_found }}" || "${{ steps.check_repo_hash.outputs.hash_found }}" == 'false' ]] && [[ -z "${{ steps.check_repo_tag.outputs.tag_found }}" || "${{ steps.check_repo_tag.outputs.tag_found }}" == 'false' ]]; then
            echo "Installing from wordpress.org repository..."
            wp plugin install accessibility-checker --allow-root --ssh=docker:wordpress
          else 
            echo "Plugin installed from tag or hash, building..."
            cd /tmp/accessibility-checker
            composer install --no-dev --no-interaction
            npm install --ignore-scripts
            npm run build
            sudo cp -R /tmp/accessibility-checker /tmp/wordpress/wp-content/plugins
            sudo chown www-data:www-data /tmp/wordpress/wp-content/plugins/accessibility-checker -R
          fi

          wp plugin activate accessibility-checker --allow-root --ssh=docker:wordpress

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Run Cypress
        run: |
          npm install
          npx cypress run

      - name: Archive Cypress videos
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress
          path: |
            cypress/videos
            cypress/screenshots
